2020-03-23 12:37:15.267  INFO 30591 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 30591 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 12:37:15.384  INFO 30591 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 12:37:15.508  INFO 30591 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 12:37:15.509  INFO 30591 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 12:37:15.510  INFO 30591 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 12:37:16.958  INFO 30591 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 12:37:17.125  INFO 30591 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 145ms. Found 4 JPA repository interfaces.
2020-03-23 12:37:17.761  INFO 30591 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 12:37:18.766  INFO 30591 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 12:37:18.786  INFO 30591 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 12:37:18.787  INFO 30591 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 12:37:18.985  INFO 30591 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 12:37:18.985  INFO 30591 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3474 ms
2020-03-23 12:37:19.536  INFO 30591 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 12:37:19.694  INFO 30591 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 12:37:19.939  INFO 30591 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 12:37:20.105  INFO 30591 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 12:37:20.796  INFO 30591 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 12:37:20.834  INFO 30591 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 12:37:22.688  INFO 30591 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 12:37:22.700  INFO 30591 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 12:37:22.756  INFO 30591 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 12:37:24.956  INFO 30591 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 12:37:25.532  INFO 30591 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 12:37:26.131  INFO 30591 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 12:37:26.137  INFO 30591 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 12.74 seconds (JVM running for 14.502)
2020-03-23 12:38:53.253  INFO 30591 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 12:38:53.254  INFO 30591 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-03-23 12:38:53.284  INFO 30591 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 30 ms
2020-03-23 12:38:53.363  INFO 30591 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.index', args=[Page request [number: 0, size 8, sort: updateTime: DESC], {}]}
2020-03-23 12:38:53.613  WARN 30591 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 12:38:53.659  WARN 30591 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 12:38:53.692  INFO 30591 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:38:53.692  INFO 30591 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:index
2020-03-23 12:39:27.872 ERROR 30591 --- [http-nio-8080-exec-3] c.b.b.e.ControllerExceptionHandler       : Request URL : http://localhost:8080/blog/17 , Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:201)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:421)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getHandlerInternal(RequestMappingHandlerMapping.java:449)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getHandlerInternal(RequestMappingHandlerMapping.java:67)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:393)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-23 12:39:27.875  WARN 30591 --- [http-nio-8080-exec-3] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' not supported]
2020-03-23 12:39:48.358  INFO 30591 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:39:48.379  INFO 30591 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:39:48.380  INFO 30591 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:40:41.539  INFO 30591 --- [http-nio-8080-exec-9] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:40:41.545  INFO 30591 --- [http-nio-8080-exec-9] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:40:41.546  INFO 30591 --- [http-nio-8080-exec-9] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:45:38.796  INFO 30591 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 12:45:38.799  INFO 30591 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 12:45:38.806  INFO 30591 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 12:45:38.821  INFO 30591 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 12:45:49.284  INFO 31006 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 31006 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 12:45:49.300  INFO 31006 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 12:45:49.456  INFO 31006 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 12:45:49.457  INFO 31006 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 12:45:49.457  INFO 31006 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 12:45:51.041  INFO 31006 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 12:45:51.251  INFO 31006 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 191ms. Found 4 JPA repository interfaces.
2020-03-23 12:45:52.101  INFO 31006 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 12:45:53.211  INFO 31006 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 12:45:53.232  INFO 31006 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 12:45:53.233  INFO 31006 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 12:45:53.373  INFO 31006 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 12:45:53.374  INFO 31006 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3916 ms
2020-03-23 12:45:53.922  INFO 31006 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 12:45:54.060  INFO 31006 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 12:45:54.367  INFO 31006 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 12:45:54.609  INFO 31006 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 12:45:55.298  INFO 31006 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 12:45:55.341  INFO 31006 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 12:45:57.471  INFO 31006 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 12:45:57.486  INFO 31006 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 12:45:57.550  INFO 31006 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 12:46:00.480  INFO 31006 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 12:46:00.731  INFO 31006 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 12:46:01.401  INFO 31006 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 12:46:01.407  INFO 31006 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 13.499 seconds (JVM running for 17.006)
2020-03-23 12:47:06.686  INFO 31006 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 12:47:06.687  INFO 31006 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-03-23 12:47:06.741  INFO 31006 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 54 ms
2020-03-23 12:47:06.910  INFO 31006 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:47:44.482  INFO 31006 --- [http-nio-8080-exec-1] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:47:44.516  INFO 31006 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:47:44.517  INFO 31006 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:48:17.133  INFO 31006 --- [http-nio-8080-exec-2] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:48:17.154  INFO 31006 --- [http-nio-8080-exec-2] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:48:17.160  INFO 31006 --- [http-nio-8080-exec-2] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:48:17.161  INFO 31006 --- [http-nio-8080-exec-2] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:48:28.606  INFO 31006 --- [http-nio-8080-exec-3] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:48:28.627  INFO 31006 --- [http-nio-8080-exec-3] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:48:28.633  INFO 31006 --- [http-nio-8080-exec-3] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:48:28.634  INFO 31006 --- [http-nio-8080-exec-3] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:48:48.441  INFO 31006 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:48:48.480  INFO 31006 --- [http-nio-8080-exec-4] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:48:48.487  INFO 31006 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:48:48.487  INFO 31006 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:49:05.378  INFO 31006 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:49:05.411  INFO 31006 --- [http-nio-8080-exec-5] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:49:05.417  INFO 31006 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:49:05.418  INFO 31006 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:49:09.393  INFO 31006 --- [http-nio-8080-exec-7] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:49:09.411  INFO 31006 --- [http-nio-8080-exec-7] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:49:09.416  INFO 31006 --- [http-nio-8080-exec-7] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:49:09.416  INFO 31006 --- [http-nio-8080-exec-7] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:49:11.162  INFO 31006 --- [http-nio-8080-exec-6] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:49:11.179  INFO 31006 --- [http-nio-8080-exec-6] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:49:11.183  INFO 31006 --- [http-nio-8080-exec-6] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:49:11.184  INFO 31006 --- [http-nio-8080-exec-6] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:49:12.929  INFO 31006 --- [http-nio-8080-exec-8] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:49:12.947  INFO 31006 --- [http-nio-8080-exec-8] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:49:12.954  INFO 31006 --- [http-nio-8080-exec-8] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:49:12.955  INFO 31006 --- [http-nio-8080-exec-8] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:49:13.651  INFO 31006 --- [http-nio-8080-exec-9] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:49:13.667  INFO 31006 --- [http-nio-8080-exec-9] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:49:13.673  INFO 31006 --- [http-nio-8080-exec-9] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:49:13.673  INFO 31006 --- [http-nio-8080-exec-9] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:49:14.521  INFO 31006 --- [http-nio-8080-exec-10] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:49:14.542  INFO 31006 --- [http-nio-8080-exec-10] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:49:14.547  INFO 31006 --- [http-nio-8080-exec-10] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:49:14.547  INFO 31006 --- [http-nio-8080-exec-10] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:52:03.401  INFO 31006 --- [http-nio-8080-exec-2] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:52:03.438  INFO 31006 --- [http-nio-8080-exec-2] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:52:03.454  INFO 31006 --- [http-nio-8080-exec-2] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:52:03.454  INFO 31006 --- [http-nio-8080-exec-2] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:52:08.849  INFO 31006 --- [http-nio-8080-exec-3] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:52:08.870  INFO 31006 --- [http-nio-8080-exec-3] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:52:08.875  INFO 31006 --- [http-nio-8080-exec-3] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:52:08.876  INFO 31006 --- [http-nio-8080-exec-3] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:53:30.536  INFO 31006 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 12:53:30.538  INFO 31006 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 12:53:30.547  INFO 31006 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 12:53:30.563  INFO 31006 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 12:53:37.060  INFO 31742 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 31742 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 12:53:37.069  INFO 31742 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 12:53:37.446  INFO 31742 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 12:53:37.447  INFO 31742 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 12:53:37.448  INFO 31742 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 12:53:39.167  INFO 31742 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 12:53:39.382  INFO 31742 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 187ms. Found 4 JPA repository interfaces.
2020-03-23 12:53:40.233  INFO 31742 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 12:53:41.470  INFO 31742 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 12:53:41.490  INFO 31742 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 12:53:41.491  INFO 31742 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 12:53:41.640  INFO 31742 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 12:53:41.640  INFO 31742 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 4191 ms
2020-03-23 12:53:42.213  INFO 31742 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 12:53:42.346  INFO 31742 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 12:53:42.596  INFO 31742 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 12:53:42.803  INFO 31742 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 12:53:43.458  INFO 31742 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 12:53:43.501  INFO 31742 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 12:53:45.740  INFO 31742 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 12:53:45.757  INFO 31742 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 12:53:45.824  INFO 31742 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 12:53:48.929  INFO 31742 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 12:53:49.188  INFO 31742 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 12:53:49.877  INFO 31742 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 12:53:49.883  INFO 31742 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 14.812 seconds (JVM running for 17.052)
2020-03-23 12:54:23.279  INFO 31742 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 12:54:23.279  INFO 31742 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-03-23 12:54:23.314  INFO 31742 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 33 ms
2020-03-23 12:54:23.419  INFO 31742 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:55:51.533  WARN 31742 --- [HikariPool-1 housekeeper] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=1m6s310ms504µs191ns).
2020-03-23 12:56:45.344  INFO 31742 --- [http-nio-8080-exec-1] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:57:09.758  INFO 31742 --- [http-nio-8080-exec-2] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:57:09.752  INFO 31742 --- [http-nio-8080-exec-1] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:57:11.049  INFO 31742 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:57:11.051  INFO 31742 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:57:11.071  INFO 31742 --- [http-nio-8080-exec-2] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:57:11.084  INFO 31742 --- [http-nio-8080-exec-2] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:57:11.085  INFO 31742 --- [http-nio-8080-exec-2] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:57:13.051  INFO 31742 --- [http-nio-8080-exec-3] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:57:13.072  INFO 31742 --- [http-nio-8080-exec-3] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:57:13.078  INFO 31742 --- [http-nio-8080-exec-3] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:57:13.079  INFO 31742 --- [http-nio-8080-exec-3] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:57:18.226  INFO 31742 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 12:57:18.248  INFO 31742 --- [http-nio-8080-exec-4] com.blog.blog.web.IndexController        : Blog{id=17, title='SpringDataJPA 学习', content='### spring Data JPA 
#### JPA基本注解
- 对象中的注解

|注解|功能|主要参数|参数功能|
|---|---|---|---|
|@Entity|加注在实体类上，将实体类中的属性映射到数据库中|||
|@Table|与@Entity一起使用|name：string|通过 name 映射数据表的表名|
|@Id|映射主键|---|---|     
|@GeneratedValue|与id一同使用，设置主键自增|IDEMTITY <br> AUTO <br> SEQUENCE <br> TABLE|IDEMTITY:采用数据库ID自增长的方式在自增主键字段，Orcale不支持这种方式<br>SEQUENCE:通过序列产生主键，结合@SequenceGenerator一起使用<br>AUTO:JPA自动选择合适的策略，默认选项<br>TABLE: 通过表产生主键，框架由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植|     
|@SequenceGenerator|可以指定一个序列作生成主键|---|---|   
|@Basic|默认属性实体类中加入@Entity后所有属性多有默认加入@Basic|---|---|
|@Column|该属性加在实体类的属性上 表示属性的类型|name：string<br>length：number<br>unique：boolean<br>unllable：boolean<br>columnDefinition|name:指定列名<br>length：指定类型长度<br>unique：主键约束<br>nullable：非空约束<br>columnDefinition：指定数据库中的实际类型|
|@Transient|加在属性上，功能：不在数据库中映射该字段|---|---|
|@Temporal|指定Date类型在数据库中的Date精度|TemporalType.TiMESTAMP<br>TemporalType.DATE|---|
|@JoinColumn| 映射表关系时的外键|name:string|设置外键的字段名|
|@ManyToOne|单项多对一映射注解|fetch:FINAL|FetchType.LAZY：懒加载，在用到时才查询|
|@OneToMany|单项一对多映射注解|fetch：FIANL<br>mappedBy="指定谁来维护"|FetchType.EAGER|
|---|---|---|---| 


@GeneratedValue 用Table来产生主键
------------------ 
table表结构 ： 
- 字段：        
    1. id
    1. pk_name      :表示要生成主键的表名
    1. pk_value     :主键生成开始的值

|ID|PK_NAME|PK_VALUE|
|---|---|---|
|1|table_name|1|
|---|---|---|

``` java
    @TableGenerator(name="注意这个值与谁一致",
                    table="生成主键要用的表名",
                    pkColumnName="对应表中 'pk_name'",
                    pkColumnValue="对应表中 'pk_name' 字段的值 ",
                    valueColumnName="对应表中 'pk_value'",
                    allocationSize=100 /* 步长*/)
    @GeneratedValue(strategy=GenerationType.TABLE,generator="注意这个值与谁一致")
```


### JAP中的API


- Persistence 类 
    用于获取EntityManagerFactory实例 用该类中的createEntityManagerFactory()
    /** 获取一个定义好与数据库映射的实体 */
    该方法有连个重载方法
    1. 一个传入persistence.xml配置文件中的 持久化单元名
    1. 一个传入 持久化单元名 与 一个带有参数的Map集合

- EntityManagerFactory借口
    用来获取EntityManager实例，该借口规定了4个方法：

    /** 创建EntityManager 对象来操作数据库进行CRUD */

    1. createEntityManager() ;创建实体管理器对象实例
    1. createEntityManager(Map map); Map用来放置EntityManager的属性用来初始化EntityManager
    1. isOpen(); 检查EntityManagerFactory是否在开启状态
    1. close(); 关闭EntityManagerFactory

- EntityManager中的方法：
    1. find();
    1. getReference()
    1. persistence()
    1. remove()


#### 单项多对一的关联关系
一个客户可以有多个订单，一个订单只能有一个客户

``` java
    /** 单项多对一练习
        订单表有客户表的外键
    */
         

    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        // 映射单项 多对一 关联关系
        // 使用ManyToOne来映射多对一的关系
        // 使用JoinColumn 来映射客户的外键 字段名
        @JoinColumn(name="customer_id")
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    // 测试代码
    public void testManyToOne(){
        // 创建用户对象
        Customer customer = new Customer();
        customer.setLastName("werner");
        customer.setEmail("werner@163.com");
        customer.setAge(12);
        customer.setCreatedTime(new Date());
        customer.setBirth(new Date);

        // 创建订单对象
        Order order1 = new Order();
        order1.setOrderName("鼠标")；
        order1.serCustomer(customer);

        Order order2 = new Order();
        order2.setOrderName("键盘")；
        order2.serCustomer(customer);

        entityManager.persist(customer);
        entityManager.persist(order1);
        entityManager.persist(order2);

        /**
         * 保存多对一时建议先保存1的一端，后保存n的一端 ，不然会影响效率，依然会保存成功
         */        
    }

    /**
     * 查询默认为多的一方 left outer join 单的一方 
     * 改为懒加载   在Order类中加入fetch
     *  @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
        加入懒加载后 我们查询order获取信息并不包括Customer的信息
        在我们调用 order.getCustomer() 时JPA才帮我们去查询Customer的信息
     */
    public void testManyToOneFind(){
        Order order = entityManager.find(Order.class,1);
    }

    /**
     * 删除时： 多的一方是可以删除的 ， 单的一方是不能直接删除，因为有外键约束
     * 
     * 修改时
     *  
     */
    
```

#### 单项一对多
- 用户对与订单就是一对多的关系  一个用户有多个订单

```java
    // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        @JoinColumn(name="CUSTOMER_ID")
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE})
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;
    }


    /**
     * 单项一对多 保存：
     *      保存时：必然会多出update语句
     *           查询：
     *      默认使用懒加载的方式，也可以使用@OneToManyToOne(fetch=FetchType)
     *           删除：
     *      默认情况下，若删除 1 的一端 ，则会先置空Order表中外键为null后在进行删除，也可以使用 @OneToMany(cascade={CascadeType.REMOVE}) 修改为，在删除 1 的一方时 把多的一段也一并删除
     * 
```

#### 双向多对一

```java
  // 客户类
    @Table(name="t_customer")
    @Entity
    public class Customer{

        @GeneratedValue
        @Id
        private Integer id;
        private String lastName;
        private String email;
        private int age;
        @Temporal(TemporalType.TIMESTAMP)
        private Date createdTime;
        @Temporal(TemporalType.DATE)
        private Date birth;


        //@JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 下边那个和这个是一致的
        @OneToMany(fetch=FetchType.EAGER，cascade={CascadeType.REMOVE},mappedBy="customer")
        private Set<Order> orders = new HashSet<>();
    }


    // 订单表
    @Table(name="t_order")
    @Entity
    public class Order{

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="order_name")
        private String orderName;

        @JoinColumn(name="CUSTOMER_ID") // 需要注意××××× 上边那个和这个是一致的
        @ManyToOne(fetch=FetchType.LAZY)
        private Customer customer;
    }


    /**
     *  若是双向一对多的关系，执行保存时
     *  若先保存n的一段，在保存 1 的一段 这时会出现（n*2）条update语句，因为两边互为维护关系 
     *  若先保存 1 的一端 这时会多出 n 条 update语句 (这里的n 代表 新增了几个Order对象)
     *  在进行双向 1 对多 关联关系时，建议使用多的一方来维护关联关系 
     *  放弃维护关联关系@OneToMany(mappedBy="customer") 如果用mappedBy属性就不需要@JoinColumn()
     * 

````

#### 双向一对一
```java

    @Table(name="t_department")
    @Entity
    public class Department(){

        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="DEPT_NAME")
        private String deptName;

        /**
         * 使用 @OneToOne 来进行 1-1 关系映射，
         * 若需要在当前数据表中添加主键需要使用 @JoinColumn 注意， 1-1关联关系需要添加 unique=true
         */
        @JoinColumn(name="MGR_ID",unique=true)
        @OneToOne
        private Manager manager;
    }

    @Table(name="t_manager")
    @Entity
    public class Manager(){
        @GeneratedValue
        @Id
        private Integer id;
        
        @Column(name="MGR_NAME")
        private String mgrName;
        
        @OneToOne(mappedBy="manager")
        private Department dept;

    }

    /**
     *  新增：
     *  保存时先保存不维护关系的一方，这样不会多出update语句
     * 
     *  查询： 查询关系维护方
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但可以修改fetch属性来修改加载策略
     * 
     *  查询关系不维护方：
     *  默认情况下若获取维护关联关系的一方则会通过左外连接获取对象，但是不可以修改fetch属性来修改加载策略,不建议修改
     */ 

```

#### 双向多对多

```java

    @Table
    @Entity
    public class Category{
        @GeneratedValue
        @Id
        private Integer id;
        @Column(name="CATEGORY_NAME")
        private String CategoryName;

        @ManyToMany(mappedBy="categories")
        private Set<Item> items = new HashSet<>();
    }

    @Table
    @Entity
    public class Item{
        @GeneratedValue
        @Id
        private Integer id;

        @Column(name="ITEM_NAME")
        private String itemName;

        @JoinTable(name="ITEM_CATEGORY",joinColumns={@JoinColumn(name="ITEM_ID"),referncedColumnName="ID"},inverseJoinColumns={@JoinColumn(name="CATEGORY_ID"),referncedColumnName="ID"})
        @ManyToMany
        private Set<Category> categories = new HashSet<>();
    }
```', firstPicture='firstPicture', flag='', views=0, appreciation=true, shareStatement=true, commentabled=true, published=false, recommend=true, createTime=2020-02-11 14:13:34.438, updateTime=2020-02-11 18:06:26.097, type=Type{id=2, name='测试'}, tags=[Tag{id=13, name='JAP'}], user=User{id=1, nickname='werner', username='werner', password='96e79218965eb72c92a549dd5a330112', email='4594143@qq.com', avatar='/images/felt.png', type=1, createTime=2020-02-10 05:16:44.944, updateTime=2020-02-10 05:18:40.324}, comments=[], tagIds='null', description='一款ORM框架的接口'}
2020-03-23 12:57:18.252  INFO 31742 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 12:57:18.253  INFO 31742 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 12:59:56.456  INFO 31742 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 12:59:56.458  INFO 31742 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 12:59:56.467  INFO 31742 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 12:59:56.480  INFO 31742 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 13:00:19.782  INFO 31932 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 31932 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 13:00:19.788  INFO 31932 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 13:00:19.912  INFO 31932 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 13:00:19.913  INFO 31932 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 13:00:19.913  INFO 31932 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 13:00:21.202  INFO 31932 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 13:00:21.357  INFO 31932 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 137ms. Found 4 JPA repository interfaces.
2020-03-23 13:00:21.962  INFO 31932 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 13:00:22.862  INFO 31932 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 13:00:22.881  INFO 31932 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 13:00:22.882  INFO 31932 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 13:00:23.038  INFO 31932 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 13:00:23.039  INFO 31932 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3125 ms
2020-03-23 13:00:23.534  INFO 31932 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 13:00:23.635  INFO 31932 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 13:00:23.827  INFO 31932 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 13:00:23.981  INFO 31932 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 13:00:24.563  INFO 31932 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 13:00:24.596  INFO 31932 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 13:00:26.334  INFO 31932 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 13:00:26.346  INFO 31932 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 13:00:26.400  INFO 31932 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 13:00:28.569  INFO 31932 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 13:00:29.151  INFO 31932 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 13:00:29.728  INFO 31932 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 13:00:29.733  INFO 31932 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 11.476 seconds (JVM running for 12.754)
2020-03-23 13:13:45.638  INFO 31932 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 13:13:45.641  INFO 31932 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 13:13:45.666  INFO 31932 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 13:13:45.716  INFO 31932 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 13:13:54.041  INFO 32331 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 32331 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 13:13:54.047  INFO 32331 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 13:13:54.148  INFO 32331 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 13:13:54.149  INFO 32331 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 13:13:54.150  INFO 32331 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 13:13:55.372  INFO 32331 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 13:13:55.524  INFO 32331 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 137ms. Found 4 JPA repository interfaces.
2020-03-23 13:13:56.188  INFO 32331 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 13:13:57.185  INFO 32331 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 13:13:57.205  INFO 32331 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 13:13:57.207  INFO 32331 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 13:13:57.358  INFO 32331 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 13:13:57.358  INFO 32331 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3208 ms
2020-03-23 13:13:57.873  INFO 32331 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 13:13:57.975  INFO 32331 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 13:13:58.272  INFO 32331 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 13:13:58.471  INFO 32331 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 13:13:59.119  INFO 32331 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 13:13:59.154  INFO 32331 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 13:14:01.127  INFO 32331 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 13:14:01.139  INFO 32331 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 13:14:01.199  INFO 32331 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 13:14:03.373  INFO 32331 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 13:14:03.969  INFO 32331 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 13:14:04.588  INFO 32331 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 13:14:04.594  INFO 32331 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 12.217 seconds (JVM running for 13.691)
2020-03-23 13:14:12.737  INFO 32331 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 13:14:12.737  INFO 32331 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-03-23 13:14:12.764  INFO 32331 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 27 ms
2020-03-23 13:14:12.835  INFO 32331 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.index', args=[Page request [number: 0, size 8, sort: updateTime: DESC], {}]}
2020-03-23 13:14:13.041  WARN 32331 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 13:14:13.073  WARN 32331 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 13:14:13.089  INFO 32331 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 13:14:13.090  INFO 32331 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:index
2020-03-23 13:14:19.442  INFO 32331 --- [http-nio-8080-exec-6] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 13:14:19.470  INFO 32331 --- [http-nio-8080-exec-6] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 13:14:19.471  INFO 32331 --- [http-nio-8080-exec-6] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 13:21:07.921  INFO 32331 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 13:21:07.924  INFO 32331 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 13:21:07.932  INFO 32331 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 13:21:07.962  INFO 32331 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 13:21:12.972  INFO 1063 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 1063 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 13:21:12.979  INFO 1063 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 13:21:13.173  INFO 1063 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 13:21:13.174  INFO 1063 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 13:21:13.175  INFO 1063 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 13:21:14.401  INFO 1063 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 13:21:14.554  INFO 1063 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 137ms. Found 4 JPA repository interfaces.
2020-03-23 13:21:15.182  INFO 1063 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 13:21:16.122  INFO 1063 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 13:21:16.140  INFO 1063 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 13:21:16.141  INFO 1063 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 13:21:16.266  INFO 1063 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 13:21:16.267  INFO 1063 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3091 ms
2020-03-23 13:21:16.731  INFO 1063 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 13:21:16.833  INFO 1063 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 13:21:17.022  INFO 1063 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 13:21:17.183  INFO 1063 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 13:21:17.768  INFO 1063 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 13:21:17.800  INFO 1063 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 13:21:19.638  INFO 1063 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 13:21:19.650  INFO 1063 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 13:21:19.713  INFO 1063 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 13:21:21.836  INFO 1063 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 13:21:22.359  INFO 1063 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 13:21:22.949  INFO 1063 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 13:21:22.954  INFO 1063 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 11.944 seconds (JVM running for 13.804)
2020-03-23 13:23:50.127  INFO 1063 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 13:23:50.127  INFO 1063 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-03-23 13:23:50.154  INFO 1063 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 26 ms
2020-03-23 13:23:50.225  INFO 1063 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.index', args=[Page request [number: 0, size 8, sort: updateTime: DESC], {}]}
2020-03-23 13:23:50.420  WARN 1063 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 13:23:50.451  WARN 1063 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 13:23:50.466  INFO 1063 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 13:23:50.466  INFO 1063 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:index
2020-03-23 13:23:53.736  INFO 1063 --- [http-nio-8080-exec-6] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 13:23:53.771  INFO 1063 --- [http-nio-8080-exec-6] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 13:23:53.772  INFO 1063 --- [http-nio-8080-exec-6] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 13:23:53.838 ERROR 1063 --- [http-nio-8080-exec-6] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-6] Exception processing template "blog": An error happened during template parsing (template: "class path resource [templates/blog.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/blog.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "#datas.format(blog.createTime,'yyyy-MM-dd')" (template: "blog" - line 46, col 61)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "#datas.format(blog.createTime,'yyyy-MM-dd')" (template: "blog" - line 46, col 61)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 50 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method format(java.sql.Timestamp,java.lang.String) on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154)
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:330)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	... 69 common frames omitted

2020-03-23 13:23:53.847 ERROR 1063 --- [http-nio-8080-exec-6] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/blog.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method format(java.sql.Timestamp,java.lang.String) on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154)
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:330)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-23 13:23:58.433  INFO 1063 --- [http-nio-8080-exec-9] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 13:23:58.443  INFO 1063 --- [http-nio-8080-exec-9] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 13:23:58.444  INFO 1063 --- [http-nio-8080-exec-9] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 13:23:58.483 ERROR 1063 --- [http-nio-8080-exec-9] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-9] Exception processing template "blog": An error happened during template parsing (template: "class path resource [templates/blog.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/blog.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "#datas.format(blog.createTime,'yyyy-MM-dd')" (template: "blog" - line 46, col 61)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 48 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "#datas.format(blog.createTime,'yyyy-MM-dd')" (template: "blog" - line 46, col 61)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 50 common frames omitted
Caused by: org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method format(java.sql.Timestamp,java.lang.String) on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154)
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:330)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	... 69 common frames omitted

2020-03-23 13:23:58.485 ERROR 1063 --- [http-nio-8080-exec-9] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/blog.html]")] with root cause

org.springframework.expression.spel.SpelEvaluationException: EL1011E: Method call: Attempted to call method format(java.sql.Timestamp,java.lang.String) on null context object
	at org.springframework.expression.spel.ast.MethodReference.throwIfNotNullSafe(MethodReference.java:154)
	at org.springframework.expression.spel.ast.MethodReference.getValueRef(MethodReference.java:83)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:70)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:91)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:330)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-23 13:24:58.566  INFO 1063 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 13:24:58.569  INFO 1063 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 13:24:58.576  INFO 1063 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 13:24:58.608  INFO 1063 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 13:25:03.576  INFO 1628 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 1628 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 13:25:03.582  INFO 1628 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 13:25:03.814  INFO 1628 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 13:25:03.816  INFO 1628 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 13:25:03.816  INFO 1628 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 13:25:05.252  INFO 1628 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 13:25:05.436  INFO 1628 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 165ms. Found 4 JPA repository interfaces.
2020-03-23 13:25:06.081  INFO 1628 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 13:25:06.990  INFO 1628 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 13:25:07.009  INFO 1628 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 13:25:07.010  INFO 1628 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 13:25:07.168  INFO 1628 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 13:25:07.169  INFO 1628 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3352 ms
2020-03-23 13:25:07.662  INFO 1628 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 13:25:07.764  INFO 1628 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 13:25:07.952  INFO 1628 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 13:25:08.110  INFO 1628 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 13:25:08.695  INFO 1628 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 13:25:08.728  INFO 1628 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 13:25:10.434  INFO 1628 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 13:25:10.447  INFO 1628 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 13:25:10.502  INFO 1628 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 13:25:12.743  INFO 1628 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 13:25:13.307  INFO 1628 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 13:25:13.882  INFO 1628 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 13:25:13.888  INFO 1628 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 12.383 seconds (JVM running for 13.788)
2020-03-23 13:25:25.996  INFO 1628 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 13:25:25.997  INFO 1628 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-03-23 13:25:26.021  INFO 1628 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 24 ms
2020-03-23 13:25:26.090  INFO 1628 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.index', args=[Page request [number: 0, size 8, sort: updateTime: DESC], {}]}
2020-03-23 13:25:26.285  WARN 1628 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 13:25:26.316  WARN 1628 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 13:25:26.331  INFO 1628 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 13:25:26.331  INFO 1628 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:index
2020-03-23 13:25:30.288  INFO 1628 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 13:25:30.312  INFO 1628 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 13:25:30.313  INFO 1628 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 13:30:49.834  INFO 1628 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 13:30:49.836  INFO 1628 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 13:30:49.844  INFO 1628 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 13:30:49.877  INFO 1628 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 13:30:55.272  INFO 2177 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 2177 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 13:30:55.280  INFO 2177 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 13:30:55.539  INFO 2177 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 13:30:55.540  INFO 2177 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 13:30:55.541  INFO 2177 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 13:30:56.853  INFO 2177 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 13:30:57.008  INFO 2177 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 138ms. Found 4 JPA repository interfaces.
2020-03-23 13:30:57.634  INFO 2177 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 13:30:58.566  INFO 2177 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 13:30:58.583  INFO 2177 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 13:30:58.584  INFO 2177 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 13:30:58.710  INFO 2177 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 13:30:58.711  INFO 2177 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3169 ms
2020-03-23 13:30:59.165  INFO 2177 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 13:30:59.266  INFO 2177 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 13:30:59.454  INFO 2177 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 13:30:59.613  INFO 2177 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 13:31:00.257  INFO 2177 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 13:31:00.290  INFO 2177 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 13:31:02.042  INFO 2177 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 13:31:02.055  INFO 2177 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 13:31:02.115  INFO 2177 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 13:31:04.197  INFO 2177 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 13:31:04.711  INFO 2177 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 13:31:05.289  INFO 2177 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 13:31:05.294  INFO 2177 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 12.415 seconds (JVM running for 14.347)
2020-03-23 13:31:27.830  INFO 2177 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 13:31:27.830  INFO 2177 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-03-23 13:31:27.860  INFO 2177 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 29 ms
2020-03-23 13:31:27.928  INFO 2177 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.index', args=[Page request [number: 0, size 8, sort: updateTime: DESC], {}]}
2020-03-23 13:31:28.117  WARN 2177 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 13:31:28.149  WARN 2177 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 13:31:28.164  INFO 2177 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 13:31:28.165  INFO 2177 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:index
2020-03-23 13:31:31.003  INFO 2177 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 13:31:31.030  INFO 2177 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 13:31:31.031  INFO 2177 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 13:32:45.878  INFO 2177 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 13:32:45.889  INFO 2177 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 13:32:45.889  INFO 2177 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 14:02:14.534  INFO 2177 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 14:02:14.537  INFO 2177 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:02:14.549  INFO 2177 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 14:02:14.575  INFO 2177 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 14:02:30.404  INFO 4832 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 4832 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 14:02:30.525  INFO 4832 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 14:02:30.687  INFO 4832 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 14:02:30.688  INFO 4832 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 14:02:30.689  INFO 4832 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 14:02:32.012  INFO 4832 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 14:02:32.177  INFO 4832 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 145ms. Found 4 JPA repository interfaces.
2020-03-23 14:02:32.824  INFO 4832 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 14:02:33.808  INFO 4832 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 14:02:33.828  INFO 4832 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 14:02:33.829  INFO 4832 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 14:02:33.994  INFO 4832 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 14:02:33.995  INFO 4832 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3306 ms
2020-03-23 14:02:34.503  INFO 4832 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 14:02:34.637  INFO 4832 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 14:02:34.873  INFO 4832 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 14:02:35.048  INFO 4832 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 14:02:35.688  INFO 4832 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 14:02:35.724  INFO 4832 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 14:02:37.504  INFO 4832 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 14:02:37.516  INFO 4832 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:02:37.571  INFO 4832 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 14:02:39.788  INFO 4832 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 14:02:40.380  INFO 4832 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 14:02:40.979  INFO 4832 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 14:02:40.984  INFO 4832 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 12.109 seconds (JVM running for 13.506)
2020-03-23 14:03:23.438  INFO 4832 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 14:03:23.442  INFO 4832 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:03:23.459  INFO 4832 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 14:03:23.477  INFO 4832 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 14:03:28.697  INFO 4924 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 4924 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 14:03:28.703  INFO 4924 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 14:03:28.948  INFO 4924 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 14:03:28.949  INFO 4924 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 14:03:28.950  INFO 4924 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 14:03:30.190  INFO 4924 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 14:03:30.344  INFO 4924 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 138ms. Found 4 JPA repository interfaces.
2020-03-23 14:03:30.956  INFO 4924 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 14:03:31.873  INFO 4924 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 14:03:31.891  INFO 4924 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 14:03:31.892  INFO 4924 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 14:03:32.018  INFO 4924 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 14:03:32.019  INFO 4924 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3068 ms
2020-03-23 14:03:32.506  INFO 4924 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 14:03:32.610  INFO 4924 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 14:03:32.802  INFO 4924 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 14:03:32.967  INFO 4924 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 14:03:33.555  INFO 4924 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 14:03:33.588  INFO 4924 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 14:03:35.355  INFO 4924 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 14:03:35.369  INFO 4924 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:03:35.432  INFO 4924 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 14:03:37.524  INFO 4924 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 14:03:38.049  INFO 4924 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 14:03:38.626  INFO 4924 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 14:03:38.631  INFO 4924 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 11.858 seconds (JVM running for 13.602)
2020-03-23 14:04:22.708  INFO 4924 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 14:04:22.709  INFO 4924 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-03-23 14:04:22.738  INFO 4924 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 28 ms
2020-03-23 14:04:22.827  INFO 4924 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 14:04:23.108  INFO 4924 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:04:23.109  INFO 4924 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 14:05:40.689  INFO 4924 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 14:05:40.692  INFO 4924 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:05:40.700  INFO 4924 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 14:05:40.723  INFO 4924 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 14:05:47.915  INFO 5061 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 5061 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 14:05:47.922  INFO 5061 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 14:05:48.152  INFO 5061 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 14:05:48.153  INFO 5061 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 14:05:48.154  INFO 5061 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 14:05:49.529  INFO 5061 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 14:05:49.681  INFO 5061 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 137ms. Found 4 JPA repository interfaces.
2020-03-23 14:05:50.291  INFO 5061 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 14:05:51.197  INFO 5061 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 14:05:51.215  INFO 5061 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 14:05:51.216  INFO 5061 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 14:05:51.370  INFO 5061 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 14:05:51.371  INFO 5061 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3216 ms
2020-03-23 14:05:51.866  INFO 5061 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 14:05:51.974  INFO 5061 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 14:05:52.166  INFO 5061 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 14:05:52.322  INFO 5061 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 14:05:52.909  INFO 5061 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 14:05:52.943  INFO 5061 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 14:05:54.659  INFO 5061 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 14:05:54.671  INFO 5061 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:05:54.729  INFO 5061 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 14:05:56.938  INFO 5061 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 14:05:57.494  INFO 5061 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 14:05:58.073  INFO 5061 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 14:05:58.078  INFO 5061 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 11.595 seconds (JVM running for 12.885)
2020-03-23 14:07:58.509  INFO 5061 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 14:07:58.510  INFO 5061 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-03-23 14:07:58.538  INFO 5061 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 28 ms
2020-03-23 14:07:58.621  INFO 5061 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 14:07:58.890  INFO 5061 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:07:58.891  INFO 5061 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 14:11:16.316  INFO 5061 --- [http-nio-8080-exec-2] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 14:11:16.346  INFO 5061 --- [http-nio-8080-exec-2] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:11:16.346  INFO 5061 --- [http-nio-8080-exec-2] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 14:11:37.303  INFO 5061 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 14:11:37.329  INFO 5061 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:11:37.330  INFO 5061 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 14:12:09.722  INFO 5061 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 14:12:09.725  INFO 5061 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:12:09.733  INFO 5061 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 14:12:09.767  INFO 5061 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 14:12:13.690  INFO 5447 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 5447 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 14:12:13.696  INFO 5447 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 14:12:13.820  INFO 5447 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 14:12:13.822  INFO 5447 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 14:12:13.822  INFO 5447 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 14:12:15.073  INFO 5447 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 14:12:15.227  INFO 5447 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 136ms. Found 4 JPA repository interfaces.
2020-03-23 14:12:15.834  INFO 5447 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 14:12:16.748  INFO 5447 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 14:12:16.766  INFO 5447 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 14:12:16.767  INFO 5447 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 14:12:16.926  INFO 5447 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 14:12:16.927  INFO 5447 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3104 ms
2020-03-23 14:12:17.411  INFO 5447 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 14:12:17.514  INFO 5447 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 14:12:17.705  INFO 5447 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 14:12:17.861  INFO 5447 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 14:12:18.447  INFO 5447 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 14:12:18.479  INFO 5447 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 14:12:20.166  INFO 5447 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 14:12:20.178  INFO 5447 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:12:20.232  INFO 5447 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 14:12:22.406  INFO 5447 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 14:12:22.988  INFO 5447 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 14:12:23.565  INFO 5447 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 14:12:23.570  INFO 5447 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 11.372 seconds (JVM running for 12.675)
2020-03-23 14:12:44.731  INFO 5447 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 14:12:44.732  INFO 5447 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-03-23 14:12:44.765  INFO 5447 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 33 ms
2020-03-23 14:12:44.837  INFO 5447 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.index', args=[Page request [number: 0, size 8, sort: updateTime: DESC], {}]}
2020-03-23 14:12:45.095  WARN 5447 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 14:12:45.129  WARN 5447 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 14:12:45.144  INFO 5447 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:12:45.145  INFO 5447 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:index
2020-03-23 14:12:48.496  INFO 5447 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 14:12:48.660  INFO 5447 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:12:48.660  INFO 5447 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 14:18:48.045  INFO 5447 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 14:18:48.049  INFO 5447 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:18:48.061  INFO 5447 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 14:18:48.077  INFO 5447 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 14:18:52.362  INFO 5977 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 5977 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 14:18:52.367  INFO 5977 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 14:18:52.481  INFO 5977 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 14:18:52.482  INFO 5977 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 14:18:52.482  INFO 5977 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 14:18:54.069  INFO 5977 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 14:18:54.234  INFO 5977 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 146ms. Found 4 JPA repository interfaces.
2020-03-23 14:18:54.846  INFO 5977 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 14:18:55.775  INFO 5977 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 14:18:55.791  INFO 5977 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 14:18:55.792  INFO 5977 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 14:18:55.922  INFO 5977 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 14:18:55.923  INFO 5977 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3440 ms
2020-03-23 14:18:56.374  INFO 5977 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 14:18:56.478  INFO 5977 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 14:18:56.670  INFO 5977 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 14:18:56.832  INFO 5977 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 14:18:57.411  INFO 5977 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 14:18:57.443  INFO 5977 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 14:18:59.200  INFO 5977 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 14:18:59.212  INFO 5977 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:18:59.272  INFO 5977 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 14:19:01.374  INFO 5977 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 14:19:01.891  INFO 5977 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 14:19:02.464  INFO 5977 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 14:19:02.470  INFO 5977 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 11.553 seconds (JVM running for 12.998)
2020-03-23 14:19:27.654  INFO 5977 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 14:19:27.654  INFO 5977 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-03-23 14:19:27.681  INFO 5977 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 26 ms
2020-03-23 14:19:27.755  INFO 5977 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.index', args=[Page request [number: 0, size 8, sort: updateTime: DESC], {}]}
2020-03-23 14:19:27.963  WARN 5977 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 14:19:27.997  WARN 5977 --- [http-nio-8080-exec-1] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 14:19:28.013  INFO 5977 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:19:28.015  INFO 5977 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:index
2020-03-23 14:19:33.534  INFO 5977 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://localhost:8080/blog/17/', ip='0:0:0:0:0:0:0:1', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 14:19:33.723  INFO 5977 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:19:33.724  INFO 5977 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 14:30:07.315  INFO 5977 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://112.249.18.36:8080/', ip='192.168.12.114', classMethod='com.blog.blog.web.IndexController.index', args=[Page request [number: 0, size 8, sort: updateTime: DESC], {}]}
2020-03-23 14:30:07.356  INFO 5977 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:30:07.357  INFO 5977 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:index
2020-03-23 14:30:16.928  INFO 5977 --- [http-nio-8080-exec-3] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://112.249.18.36:8080/blog/17/', ip='192.168.12.114', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 14:30:16.952  INFO 5977 --- [http-nio-8080-exec-3] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:30:16.952  INFO 5977 --- [http-nio-8080-exec-3] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 14:31:23.294  INFO 5977 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://112.249.18.36:8080/blog/17/', ip='192.168.12.114', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 14:31:23.315  INFO 5977 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:31:23.315  INFO 5977 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 14:31:35.808  INFO 5977 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://112.249.18.36:8080/blog/17/', ip='192.168.12.114', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 14:31:35.839  INFO 5977 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:31:35.839  INFO 5977 --- [http-nio-8080-exec-4] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 14:31:48.789  INFO 5977 --- [http-nio-8080-exec-9] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://112.249.18.36:8080/', ip='192.168.12.114', classMethod='com.blog.blog.web.IndexController.index', args=[Page request [number: 0, size 8, sort: updateTime: DESC], {}]}
2020-03-23 14:31:48.821  INFO 5977 --- [http-nio-8080-exec-9] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:31:48.822  INFO 5977 --- [http-nio-8080-exec-9] com.blog.blog.aspect.LogAspect           : Result:index
2020-03-23 14:32:13.536  INFO 5977 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://112.249.18.36:8080/', ip='192.168.12.114', classMethod='com.blog.blog.web.IndexController.index', args=[Page request [number: 0, size 8, sort: updateTime: DESC], {}]}
2020-03-23 14:32:13.566  INFO 5977 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:32:13.566  INFO 5977 --- [http-nio-8080-exec-5] com.blog.blog.aspect.LogAspect           : Result:index
2020-03-23 14:40:08.330  INFO 5977 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 14:40:08.334  INFO 5977 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:40:08.347  INFO 5977 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 14:40:08.393  INFO 5977 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
2020-03-23 14:40:13.885  INFO 11750 --- [restartedMain] com.blog.blog.BlogApplication            : Starting BlogApplication on mybook-pc with PID 11750 (/home/mybook/IdeaProjects/blog/target/classes started by mybook in /home/mybook/IdeaProjects/blog)
2020-03-23 14:40:13.904  INFO 11750 --- [restartedMain] com.blog.blog.BlogApplication            : The following profiles are active: dev
2020-03-23 14:40:14.139  INFO 11750 --- [restartedMain] o.s.b.devtools.restart.ChangeableUrls    : The Class-Path manifest attribute in /home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jaxb-runtime-2.3.2.jar referenced one or more files that do not exist: file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.xml.bind-api-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/txw2-2.3.2.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/istack-commons-runtime-3.0.8.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/stax-ex-1.8.1.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/FastInfoset-1.2.16.jar,file:/home/mybook/Repository/org/glassfish/jaxb/jaxb-runtime/2.3.2/jakarta.activation-api-1.2.1.jar
2020-03-23 14:40:14.141  INFO 11750 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-03-23 14:40:14.142  INFO 11750 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-03-23 14:40:15.593  INFO 11750 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2020-03-23 14:40:15.756  INFO 11750 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 145ms. Found 4 JPA repository interfaces.
2020-03-23 14:40:16.393  INFO 11750 --- [restartedMain] trationDelegate$BeanPostProcessorChecker : Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-03-23 14:40:17.400  INFO 11750 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-03-23 14:40:17.418  INFO 11750 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-03-23 14:40:17.419  INFO 11750 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-03-23 14:40:17.560  INFO 11750 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-03-23 14:40:17.561  INFO 11750 --- [restartedMain] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 3418 ms
2020-03-23 14:40:18.069  INFO 11750 --- [restartedMain] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2020-03-23 14:40:18.202  INFO 11750 --- [restartedMain] org.hibernate.Version                    : HHH000412: Hibernate Core {5.4.9.Final}
2020-03-23 14:40:18.451  INFO 11750 --- [restartedMain] o.hibernate.annotations.common.Version   : HCANN000001: Hibernate Commons Annotations {5.1.0.Final}
2020-03-23 14:40:18.635  INFO 11750 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2020-03-23 14:40:19.302  INFO 11750 --- [restartedMain] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2020-03-23 14:40:19.336  INFO 11750 --- [restartedMain] org.hibernate.dialect.Dialect            : HHH000400: Using dialect: org.hibernate.dialect.MySQL8Dialect
2020-03-23 14:40:21.284  INFO 11750 --- [restartedMain] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2020-03-23 14:40:21.297  INFO 11750 --- [restartedMain] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:40:21.355  INFO 11750 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-03-23 14:40:23.537  INFO 11750 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-03-23 14:40:24.072  INFO 11750 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-03-23 14:40:24.662  INFO 11750 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-03-23 14:40:24.667  INFO 11750 --- [restartedMain] com.blog.blog.BlogApplication            : Started BlogApplication in 12.236 seconds (JVM running for 14.528)
2020-03-23 14:40:44.118  INFO 11750 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-03-23 14:40:44.119  INFO 11750 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-03-23 14:40:44.157  INFO 11750 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 38 ms
2020-03-23 14:40:44.200 ERROR 11750 --- [http-nio-8080-exec-1] c.b.b.e.ControllerExceptionHandler       : Request URL : http://112.249.18.36:8080/admin/login , Exception : {}

org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported
	at org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:201)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:421)
	at org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:367)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getHandlerInternal(RequestMappingHandlerMapping.java:449)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getHandlerInternal(RequestMappingHandlerMapping.java:67)
	at org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:393)
	at org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1234)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1016)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:367)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:860)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1591)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-03-23 14:40:44.206  WARN 11750 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'GET' not supported]
2020-03-23 14:42:03.456  INFO 11750 --- [http-nio-8080-exec-6] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://112.249.18.36:8080/', ip='192.168.12.114', classMethod='com.blog.blog.web.IndexController.index', args=[Page request [number: 0, size 8, sort: updateTime: DESC], {}]}
2020-03-23 14:42:03.490  WARN 11750 --- [http-nio-8080-exec-6] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 14:42:03.506  WARN 11750 --- [http-nio-8080-exec-6] org.hibernate.orm.deprecation            : HHH90000016: Found use of deprecated 'collection property' syntax in HQL/JPQL query [t.blogs.size]; use collection function syntax instead [size(t.blogs)].
2020-03-23 14:42:03.521  INFO 11750 --- [http-nio-8080-exec-6] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:42:03.522  INFO 11750 --- [http-nio-8080-exec-6] com.blog.blog.aspect.LogAspect           : Result:index
2020-03-23 14:42:18.643  INFO 11750 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://112.249.18.36:8080/blog/17', ip='192.168.12.114', classMethod='com.blog.blog.web.IndexController.blog', args=[17, {}]}
2020-03-23 14:42:18.791  INFO 11750 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:42:18.791  INFO 11750 --- [http-nio-8080-exec-1] com.blog.blog.aspect.LogAspect           : Result:blog
2020-03-23 14:42:47.598  INFO 11750 --- [http-nio-8080-exec-8] com.blog.blog.aspect.LogAspect           : request：RequestLog{url='http://112.249.18.36:8080/search', ip='192.168.12.114', classMethod='com.blog.blog.web.IndexController.search', args=[Page request [number: 0, size 8, sort: updateTime: DESC], J, {}]}
2020-03-23 14:42:47.616  INFO 11750 --- [http-nio-8080-exec-8] com.blog.blog.aspect.LogAspect           : ============doAfter=============
2020-03-23 14:42:47.617  INFO 11750 --- [http-nio-8080-exec-8] com.blog.blog.aspect.LogAspect           : Result:search
2020-03-23 14:43:01.369  INFO 11750 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-03-23 14:43:01.372  INFO 11750 --- [SpringContextShutdownHook] j.LocalContainerEntityManagerFactoryBean : Closing JPA EntityManagerFactory for persistence unit 'default'
2020-03-23 14:43:01.379  INFO 11750 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...
2020-03-23 14:43:01.400  INFO 11750 --- [SpringContextShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.
